{
    "_type": "Relation",
    "checks": [],
    "streams": [
        \{{# join element.data.metrics "," \}}
            {
                "_type": "MetricStream",
                "name": "\{{ name \}}",
                "query": {
                    "conditions": [
                        \{{# join conditions "," \}}
                            {
                                "key": "\{{ key \}}",
                                "value": "\{{ value \}}"
                            }
                        \{{/ join \}}
                    ],
                    "_type": " MetricTelemetryQuery",
                    "metricField": "\{{#if metricField \}}\{{ metricField \}}\{{else\}}value\{{/if\}}",
                    "aggregation": "\{{#if aggregation \}}\{{ aggregation \}}\{{else\}}MEAN\{{/if\}}"
                },
                "dataSource": \{{ get "urn:stackpack:common:data-source:stackstate-metrics" \}},
                "dataType": "METRICS",
                "id": \{{ id \}}
            }
        \{{/ join \}}
    ],
    "labels": [],
    "name": "\{{ element.sourceExternalId \}} --> \{{ element.targetExternalId \}}",
    \{{#if element.data.description\}}
    "description": "\{{ element.data.description \}}",
    \{{/if\}}
    "type": \{{ getOrCreate (identifier "urn:stackpack:common" "RelationType" element.type.name ) (identifier "urn:system:auto" "RelationType" element.type.name) (concat "Type=RelationType;Name=" element.type.name) \}},
    "dependencyDirection": "\{{#if element.data.dependencyDirection \}}\{{ element.data.dependencyDirection \}}\{{else\}}ONE_WAY\{{/if\}}",
    "source": \{{ element.sourceId \}},
    "target": \{{ element.targetId \}}
}